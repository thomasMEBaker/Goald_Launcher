<?xml version="1.0" encoding="utf-8"?>
<!-- Copyright (c) 2020 Isara Technologies. All Rights Reserved. -->
<!--GearVR plugin additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
	<!-- init section is always evaluated once per architecture -->
	<trace enable="true"/>
	<init>
		<log text="AndroidAPITemplate init"/>		
	</init>

  <androidManifestUpdates>
    <addElements tag="application">
	  
	  <activity android:name="com.isaratech.androidapi.AndroidAPITemplateActivity"
          android:configChanges="keyboard|keyboardHidden|screenLayout|screenSize|orientation"
          android:label="@string/app_name" />
		  
    </addElements>

		
  </androidManifestUpdates>

  <!-- optional additions to proguard -->
  <proguardAdditions>
    <insert><![CDATA[
      -keepattributes Signature
      -dontskipnonpubliclibraryclassmembers

     -keepclassmembers class com.epicgames.ue4.GameActivity {
            public <methods>;
            public <fields>;
     }
    ]]></insert>
  </proguardAdditions>

  <resourceCopies>
    <!-- Copy the generated resource file to be packaged -->
  </resourceCopies>

  <AARImports>
  </AARImports>
  
  <!-- optional additions to the GameActivity imports in GameActivity.java -->
	<gameActivityImportAdditions>
	  <insert>
      import java.util.HashSet;
      import java.util.Arrays;
      import android.text.TextUtils;
      import android.graphics.BitmapFactory;
      import android.os.Handler;
      import android.widget.Toast;

      import android.bluetooth.BluetoothManager;
      import android.bluetooth.BluetoothAdapter;
      import android.bluetooth.BluetoothDevice;
      import android.bluetooth.BluetoothGatt;
      import android.bluetooth.BluetoothGattCallback;
      import android.bluetooth.BluetoothGattCharacteristic;
      import android.bluetooth.BluetoothGattDescriptor;
      import android.bluetooth.BluetoothGattService;
      import android.bluetooth.BluetoothProfile;
      import android.content.Context;
      import android.util.Log;
      import java.util.Set;
      import java.util.UUID;
      import java.net.InetAddress;
      import java.net.UnknownHostException;
      import android.net.ConnectivityManager;

    </insert>
	</gameActivityImportAdditions>
	

	<!-- optional additions to the GameActivity class in GameActivity.java -->
	<gameActivityClassAdditions>
		<insert>
      <![CDATA[
      private SensorManager mSensorManager;
      private Sensor mLight;
      private SensorEventListener mSensorListener;
      private float mLastLightMeasure;
			private static final String TAG = "NativeAndroidPlugin-";
      public static Context context;
	  
	  public void AndroidThunkJava_AndroidAPI_LaunchRelieve() {
			Intent relieveLaunchIntent = getPackageManager().getLaunchIntentForPackage("com.RovrSystems.RovrRelieve");
			startActivity( relieveLaunchIntent );
		}
    
    public void AndroidThunkJava_AndroidAPI_LaunchRestore() {
			Intent restoreLaunchIntent = getPackageManager().getLaunchIntentForPackage("com.RovrSystems.RovrRestore");
			startActivity( restoreLaunchIntent );
		}
		
		public void AndroidThunkJava_AndroidAPI_LaunchFirefox() {
			Intent firefoxLaunchIntent = getPackageManager().getLaunchIntentForPackage("org.mozilla.vrbrowser");
			startActivity( firefoxLaunchIntent );
		}
    
    public void AndroidThunkJava_AndroidAPI_CheckInternet(boolean[] input) {
        try {
        InetAddress address = InetAddress.getByName("www.google.com");
        input[0] = !address.equals("");
				}catch (UnknownHostException e) {
						// Log error
            input[0] = false;
				}
		}
    
    public void AndroidThunkJava_AndroidAPI_CheckValidConnection(boolean[] input) {
				context = getApplicationContext();
        ConnectivityManager connectivityManager = ((ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE));
				input[0] = connectivityManager.getActiveNetworkInfo() != null && connectivityManager.getActiveNetworkInfo().isConnected();;
    }

		]]>
		</insert>
	</gameActivityClassAdditions>
	
	<!-- optional additions to GameActivity ReadMETADATA metadata reading in GameActivity.java -->
	<gameActivityReadMetadataAdditions>
	<insert>

  </insert>
	</gameActivityReadMetadataAdditions>
	
	<!-- optional additions to GameActivity onCreate in GameActivity.java -->
	<gameActivityOnCreateAdditions>
		<insert>
		<![CDATA[
    mSensorManager = (SensorManager)getSystemService(SENSOR_SERVICE);
		mLight = mSensorManager.getDefaultSensor(Sensor.TYPE_LIGHT); mSensorListener = new SensorEventListener() {
			public void onAccuracyChanged(Sensor sensor, int accuracy) {
				//
			}
			public void onSensorChanged(SensorEvent event) {
					if(event.sensor == mLight)
						mLastLightMeasure = event.values[0];
			}
		};
		]]>
		</insert>
	</gameActivityOnCreateAdditions>

	<!-- optional additions to GameActivity onDestroy in GameActivity.java -->
	<gameActivityOnDestroyAdditions>
		<insert>
		
		</insert>
	</gameActivityOnDestroyAdditions>
	
	
	<!-- optional additions to GameActivity onStart in GameActivity.java -->
	<gameActivityOnStartAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStartAdditions>

	<!-- optional additions to GameActivity onStop in GameActivity.java -->
	<gameActivityOnStopAdditions>
		<insert>
		
		</insert>
	</gameActivityOnStopAdditions>
	

	<!-- optional additions to GameActivity onPause in GameActivity.java	-->
	<gameActivityOnPauseAdditions>
    <insert>
    <![CDATA[
		mSensorManager.registerListener(mSensorListener, mLight, SensorManager.SENSOR_DELAY_UI);
    ]]>
    </insert>
  </gameActivityOnPauseAdditions>


  <!-- optional additions to GameActivity onResume in GameActivity.java	-->
  <gameActivityOnResumeAdditions>
    <insert>

      mSensorManager.registerListener(mSensorListener, mLight, SensorManager.SENSOR_DELAY_UI);
    </insert>
  </gameActivityOnResumeAdditions>


	<!-- optional additions to GameActivity onActivityResult in GameActivity.java -->
	<gameActivityOnActivityResultAdditions>
		<insert>
		</insert>
    </gameActivityOnActivityResultAdditions>
	

	<!-- optional libraries to load in GameActivity.java before libUE4.so -->
	<soLoadLibrary>
		<!-- need this if plugin enabled and supported architecture, even if not packaged for GearVR -->
	</soLoadLibrary>
</root>
